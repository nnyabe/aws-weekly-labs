{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "IAM Resources Automation Lab - Create IAM Users, Groups, and Events with Lambda Logging.",
  "Resources": {
    "OneTimePasswordSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "OneTimePassword",
        "Description": "One-time password for all IAM users",
        "SecretString": "{\"password\":\"IamUserPassword01!\"}"
      }
    },
    "S3UserGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "S3UserGroup"
      },
      "DependsOn": [
        "UserCreationLambdaFunction",
        "EventBridgeRule"
      ]
    },
    "S3UserGroupPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3ReadAccessPolicy",
        "Groups": [
          {
            "Ref": "S3UserGroup"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:Get*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "EC2UserGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "EC2UserGroup"
      },
      "DependsOn": [
        "UserCreationLambdaFunction",
        "EventBridgeRule"
      ]
    },
    "EC2UserGroupPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "EC2ReadAccessPolicy",
        "Groups": [
          {
            "Ref": "EC2UserGroup"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "ec2:Describe*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "LambdaLoggingPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter",
                    "secretsmanager:GetSecretValue",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "UserCreationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "UserCreationLambda",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Code": {
          "ZipFile": "import json\nimport boto3\nimport os\n\ndef handler(event, context):\n    try:\n        # Initialize AWS clients\n        ssm = boto3.client('ssm')\n        secrets = boto3.client('secretsmanager')\n        \n        # Get user details from the event\n        detail = event['detail']\n        request_parameters = detail.get('requestParameters', {})\n        username = request_parameters.get('userName', 'Unknown')\n        \n        # Get user email from Parameter Store\n        try:\n            email_parameter = ssm.get_parameter(\n                Name=f'/users/{username}/email'\n            )\n            email = email_parameter['Parameter']['Value']\n        except Exception as e:\n            email = f\"Error retrieving email: {str(e)}\"\n        \n        # Get temporary password from Secrets Manager\n        try:\n            secret = secrets.get_secret_value(\n                SecretId='OneTimePassword'\n            )\n            password_data = json.loads(secret['SecretString'])\n            password = password_data.get('password', 'Unknown')\n        except Exception as e:\n            password = f\"Error retrieving password: {str(e)}\"\n        \n        # Create log message\n        log_message = {\n            'timestamp': event['detail']['eventTime'],\n            'username': username,\n            'email': email,\n            'temporary_password': password\n        }\n        \n        # Log the information\n        print(f\"New User Created - Details: {json.dumps(log_message, indent=2)}\")\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps('User creation logged successfully!')\n        }\n    except Exception as e:\n        print(f\"Error processing event: {str(e)}\")\n        raise e"
        }
      },
      "DependsOn": "LambdaExecutionRole"
    },
    "EventBridgeRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "UserCreationRule",
        "EventPattern": {
          "source": [
            "aws.iam"
          ],
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "detail": {
            "eventName": [
              "CreateUser"
            ]
          }
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "UserCreationLambdaFunction",
                "Arn"
              ]
            },
            "Id": "UserCreationLambdaTarget"
          }
        ]
      },
      "DependsOn": "UserCreationLambdaFunction"
    },
    "S3UserEmail": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/users/s3-user/email",
        "Type": "String",
        "Value": "s3user@example.com"
      },
      "DependsOn": [
        "UserCreationLambdaFunction",
        "EventBridgeRule"
      ]
    },
    "EC2UserEmail": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/users/ec2-user/email",
        "Type": "String",
        "Value": "ec2user@example.com"
      },
      "DependsOn": [
        "UserCreationLambdaFunction",
        "EventBridgeRule"
      ]
    },
    "EC2User": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "ec2-user",
        "Groups": [
          {
            "Ref": "EC2UserGroup"
          }
        ],
        "LoginProfile": {
          "Password": {
            "Fn::Join": [
              "",
              [
                "{{resolve:secretsmanager:",
                {
                  "Ref": "OneTimePasswordSecret"
                },
                ":SecretString:password}}"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Email",
            "Value": {
              "Ref": "EC2UserEmail"
            }
          }
        ]
      },
      "DependsOn": [
        "OneTimePasswordSecret",
        "EC2UserGroup",
        "EC2UserEmail",
        "UserCreationLambdaFunction",
        "EventBridgeRule"
      ]
    },
    "S3User": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "s3-user",
        "Groups": [
          {
            "Ref": "S3UserGroup"
          }
        ],
        "LoginProfile": {
          "Password": {
            "Fn::Join": [
              "",
              [
                "{{resolve:secretsmanager:",
                {
                  "Ref": "OneTimePasswordSecret"
                },
                ":SecretString:password}}"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Email",
            "Value": {
              "Ref": "S3UserEmail"
            }
          }
        ]
      },
      "DependsOn": [
        "OneTimePasswordSecret",
        "S3UserGroup",
        "S3UserEmail",
        "UserCreationLambdaFunction",
        "EventBridgeRule"
      ]
    }
  },
  "Outputs": {
    "OneTimePasswordSecret": {
      "Description": "One-Time Password Secret",
      "Value": {
        "Ref": "OneTimePasswordSecret"
      }
    },
    "S3User": {
      "Description": "S3 User",
      "Value": {
        "Ref": "S3User"
      }
    },
    "EC2User": {
      "Description": "EC2 User",
      "Value": {
        "Ref": "EC2User"
      }
    }
  }
}